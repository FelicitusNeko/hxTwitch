<!--
 Copyright 2022 FelicitusNeko
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<TwitchAPI>

  <collection name="ads">
    <endpoint name="StartCommercial" scope="channel:edit:commercial" method="Post" path="channels/commercial" >
      Starts a commercial on a specified channel.
      <request>
        <param name="broadcaster_id">
          ID of the channel requesting a commercial
          Minimum: 1 Maximum: 1
        </param>
        <param name="length" type="int">
          Desired length of the commercial in seconds. 
          Valid options are 30, 60, 90, 120, 150, 180.
        </param>
      </request>
      <response>
        <param name="length" type="int">
          Length of the triggered commercial
        </param>
        <param name="message">
          Provides contextual information on why the request failed
        </param>
        <param name="retry_after">
          Seconds until the next commercial can be served on this channel
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="analytics">
    <endpoint name="GetExtensionAnalytics" scope="analytics:read:extensions" path="analytics/extensions">
      Gets a URL that Extension developers can use to download analytics reports (CSV files) for their Extensions. The URL is valid for 5 minutes.

      If you specify a future date, the response will be “Report Not Found For Date Range.” If you leave both `started_at` and `ended_at` blank, the API returns the most recent date of data.
      <query>
        <param name="after" optional="1">
          Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries without `extension_id`. If an `extension_id` is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the `pagination` response field of a prior query.
        </param>
        <param name="ended_at" optional="1">
          Ending date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: `YYYY-MM-DDT00:00:00Z`. The report covers the entire ending date; e.g., if `2018-05-01T00:00:00Z` is specified, the report covers up to `2018-05-01T23:59:59Z`.

          If this is provided, `started_at` also must be specified. If `ended_at` is later than the default end date, the default date is used. Default: 1-2 days before the request was issued (depending on report availability).
        </param>
        <param name="extension_id" optional="1">
          Client ID value assigned to the extension when it is created. If this is specified, the returned URL points to an analytics report for just the specified extension. If this is not specified, the response includes multiple URLs (paginated), pointing to separate analytics reports for each of the authenticated user's Extensions.
        </param>
        <param name="first" type="int" optional="1">
          Maximum number of objects to return. Maximum: 100. Default: 20.
        </param>
        <param name="started_at" optional="1">
          Starting date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: `YYYY-MM-DDT00:00:00Z`. This must be on or after January 31, 2018.

          If this is provided, `ended_at` also must be specified. If `started_at` is earlier than the default start date, the default date is used.  The file contains one row of data per day.
        </param>
        <param name="type" optional="1">
          Type of analytics report that is returned. Currently, this field has no affect on the response as there is only one report type. If additional types were added, using this field would return only the URL for the specified report. Limit: 1. Valid values: `"overview_v2"`.
        </param>
      </query>
      <response>
        <param name="extension_id">
          ID of the extension whose analytics data is being provided.
        </param>
        <param name="URL">
          URL to the downloadable CSV file containing analytics data. Valid for 5 minutes.
        </param>
        <param name="type">
          Type of report.
        </param>
        <param name="date_range" type="object">
          <param name="started_at">
            Report start date/time. Note this may differ from (be later than) the `started_at` value in the request; the response value is the date when data for the extension is available.
          </param>
          <param name="ended_at">
            Report end date/time.
          </param>
        </param>
      </response>
    </endpoint>
    <endpoint name="GetGameAnalytics" scope="analytics:read:games" path="analytics/games">
      Gets a URL that game developers can use to download analytics reports (CSV files) for their games. The URL is valid for 5 minutes. For detail about analytics and the fields returned, see the Insights &amp; Analytics guide.

      The response has a JSON payload with a `data` field containing an array of games information elements and can contain a `pagination` field containing information required to query for more streams.

      If you specify a future date, the response will be “Report Not Found For Date Range.” If you leave both `started_at` and `ended_at` blank, the API returns the most recent date of data.
      <query>
        <param name="after" optional="1">
          Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries without `extension_id`. If an `extension_id` is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the `pagination` response field of a prior query.
        </param>
        <param name="ended_at" optional="1">
          Ending date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: `YYYY-MM-DDT00:00:00Z`. The report covers the entire ending date; e.g., if `2018-05-01T00:00:00Z` is specified, the report covers up to `2018-05-01T23:59:59Z`.

          If this is provided, `started_at` also must be specified. If `ended_at` is later than the default end date, the default date is used. Default: 1-2 days before the request was issued (depending on report availability).
        </param>
        <param name="game_id" optional="1">
          Game ID. If this is specified, the returned URL points to an analytics report for just the specified game. If this is not specified, the response includes multiple URLs (paginated), pointing to separate analytics reports for each of the authenticated user's games.
        </param>
        <param name="first" type="int" optional="1">
          Maximum number of objects to return. Maximum: 100. Default: 20.
        </param>
        <param name="started_at" optional="1">
          Starting date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: `YYYY-MM-DDT00:00:00Z`. This must be on or after January 31, 2018.

          If this is provided, `ended_at` also must be specified. If `started_at` is earlier than the default start date, the default date is used.  The file contains one row of data per day.
        </param>
        <param name="type" optional="1">
          Type of analytics report that is returned. Currently, this field has no affect on the response as there is only one report type. If additional types were added, using this field would return only the URL for the specified report. Limit: 1. Valid values: `"overview_v2"`.
        </param>
      </query>
      <response>
        <param name="game_id">
          ID of the game whose analytics data is being provided.
        </param>
        <param name="URL">
          URL to the downloadable CSV file containing analytics data. Valid for 5 minutes.
        </param>
        <param name="type">
          Type of report.
        </param>
        <param name="date_range" type="object">
          <param name="started_at">
            Report start date/time. Note this may differ from (be later than) the `started_at` value in the request; the response value is the date when data for the extension is available.
          </param>
          <param name="ended_at">
            Report end date/time.
          </param>
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="bits">
    <endpoint name="GetBitsLeaderboard" scope="bits:read" path="bits/leaderboard">
      Gets a ranked list of Bits leaderboard information for an authorized broadcaster.
      <query>
        <param name="count" type="int" optional="1">
          Number of results to be returned. Maximum: 100. Default: 10.
        </param>
        <param name="period" optional="1">
          Time period over which data is aggregated (PST time zone). This parameter interacts with `started_at`. Valid values follow. Default: `"all"`.
          - `"day"` – 00:00:00 on the day specified in `started_at`, through 00:00:00 on the following day.
          - `"week"` – 00:00:00 on Monday of the week specified in `started_at`, through 00:00:00 on the following Monday.
          - `"month"` – 00:00:00 on the first day of the month specified in `started_at`, through 00:00:00 on the first day of the following month.
          - `"year"` – 00:00:00 on the first day of the year specified in `started_at`, through 00:00:00 on the first day of the following year.
          - `"all"` – The lifetime of the broadcaster's channel. If this is specified (or used by default), `started_at` is ignored.
        </param>
        <param name="started_at" optional="1">
          Timestamp for the period over which the returned data is aggregated. Must be in RFC 3339 format. If this is not provided, data is aggregated over the current period; e.g., the current day/week/month/year. This value is ignored if `period` is `"all"`.

          Any `+` operator should be URL encoded.

          Currently, the HH:MM:SS part of this value is used only to identify a given day in PST and otherwise ignored. For example, if the `started_at` value resolves to 5PM PST yesterday and `period` is `"day"`, data is returned for all of yesterday.
        </param>
        <param name="user_id" optional="1">
          ID of the user whose results are returned; i.e., the person who paid for the Bits.

          As long as `count` is greater than 1, the returned data includes additional users, with Bits amounts above and below the user specified by `user_id`.

          If `user_id` is not provided, the endpoint returns the Bits leaderboard data across top users (subject to the value of `count`).
        </param>
      </query>
      <response>
        <param name="user_id">
          ID of the user (viewer) in the leaderboard entry.
        </param>
        <param name="user_login">
          User login name.
        </param>
        <param name="user_name">
          Display name corresponding to `user_id`.
        </param>
        <param name="rank" type="int">
          Leaderboard rank of the user.
        </param>
        <param name="score" type="int">
          Leaderboard score (number of Bits) of the user.
        </param>
      </response>
    </endpoint>
    <!-- TODO: GetCheermotes -->
    <endpoint name="GetExtensionTransactions" path="extensions/transactions">
      Gets the list of Extension transactions for a given Extension. This allows Extension back-end servers to fetch a list of transactions that have occurred for their Extension across all of Twitch. A transaction is a record of a user exchanging Bits for an in-Extension digital good.
      <query>
        <param name="extension_id">
          ID of the Extension to list transactions for.

          Maximum: 1
        </param>
        <param name="id" optional="1">
          Transaction IDs to look up. Can include multiple to fetch multiple transactions in a single request.

          For example, `/helix/extensions/transactions?extension_id=1234&amp;id=1&amp;id=2&amp;id=3`

          Maximum: 100.
        </param>
        <param name="after" optional="1">
          The cursor used to fetch the next page of data. This only applies to queries without ID. If an ID is specified, it supersedes the cursor.
        </param>
        <param name="first" type="int" optional="1">
          Maximum number of objects to return.

          Maximum: 100. Default: 20.
        </param>
      </query>
      <response>
        <param name="id">
          Unique identifier of the Bits-in-Extensions transaction.
        </param>
        <param name="timestamp">
          UTC timestamp when this transaction occurred.
        </param>
        <param name="broadcaster_id">
          Twitch user ID of the channel the transaction occurred on.
        </param>
        <param name="broadcaster_login">
          Login name of the broadcaster.
        </param>
        <param name="broadcaster_name">
          Twitch display name of the broadcaster.
        </param>
        <param name="user_id">
          Twitch user ID of the user who generated the transaction.
        </param>
        <param name="user_login">
          Login name of the user who generated the transaction.
        </param>
        <param name="user_name">
          Twitch display name of the user who generated the transaction.
        </param>
        <param name="product_type">
          Enum of the product type. Currently only `BITS_IN_EXTENSION`.
        </param>
        <param name="product_data" type="object">
          Represents the product acquired, as it looked at the time of the transaction.
          <param name="domain">
            Set to twitch.ext + your Extension ID.            
          </param>
          <param name="sku">
            Unique identifier for the product across the Extension.
          </param>
          <param name="cost" type="object">
            Represents the cost to acquire the product.
            <param name="amount" type="int">
              Number of Bits required to acquire the product.
            </param>
            <param name="type">
              Identifies the contribution method. Currently only `bits`.
            </param>
          </param>
          <param name="inDevelopment" type="bool">
            Indicates if the product is in development.
          </param>
          <param name="displayName">
            Display name of the product.
          </param>
          <param name="expiration">
            Always empty since only unexpired products can be purchased.
          </param>
          <param name="broadcast" type="bool">
            Indicates whether or not the data was sent over the Extension PubSub to all instances of the Extension.
          </param>
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="channels">
    <endpoint name="GetChannelInformation" path="channels">
      Gets channel information for users.
      <query>
        <param name="broadcaster_id">
          The ID of the broadcaster whose channel you want to get. To specify more than one ID, include this parameter for each broadcaster you want to get. For example, `broadcaster_id=1234&amp;broadcaster_id=5678`. You may specify a maximum of 100 IDs.
        </param>
      </query>
      <response>
        <param name="broadcaster_id">
          Twitch User ID of this channel owner.
        </param>
        <param name="broadcaster_login">
          Broadcaster's user login name.
        </param>
        <param name="broadcaster_name">
          Twitch user display name of this channel owner.
        </param>
        <param name="game_name">
          Name of the game being played on the channel.
        </param>
        <param name="game_id">
          Current game ID being played on the channel.
        </param>
        <param name="broadcaster_language">
          Language of the channel. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”.
        </param>
        <param name="title">
          Title of the stream.
        </param>
        <param name="delay" type="int">
          Stream delay in seconds.
        </param>
      </response>
    </endpoint>
    <endpoint name="ModifyChannelInformation" scope="channel:manage:broadcast" method="Patch" path="channels">
      Modifies channel information for users.
      <query>
        <param name="broadcaster_id">
          ID of the channel to be updated
        </param>
      </query>
      <request>
        <param name="game_id" optional="1">
          The current game ID being played on the channel. Use “0” or “” (an empty string) to unset the game.
        </param>
        <param name="broadcaster_name" optional="1">
          The language of the channel. A language value must be either the ISO 639-1 two-letter code for a supported stream language or “other”.
        </param>
        <param name="title" optional="1">
          The title of the stream. Value must not be an empty string.
        </param>
        <param name="delay" type="int" optional="1">
          Stream delay in seconds. Stream delay is a Twitch Partner feature; trying to set this value for other account types will return a 400 error.
        </param>
      </request>
    </endpoint>
    <endpoint name="GetChannelEditors" scope="channel:read:editors" path="channels/editors">
      Gets a list of users who have editor permissions for a specific channel.
      <query>
        <param name="broadcaster_id">
          Broadcaster's user ID associated with the channel.
        </param>
      </query>
      <response>
        <param name="user_id">
          User ID of the editor.
        </param>
        <param name="user_name">
          Display name of the editor.
        </param>
        <param name="created_at">
          Date and time the editor was given editor permissions.
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="channel_points">
    <endpoint name="CreateCustomRewards" scope="channel:manage:redemptions" method="Post" path="channel_points/custom_rewards">
      Creates a Custom Reward on a channel.
      <query>
        <param name="broadcaster_id">
          Provided `broadcaster_id` must match the `user_id` in the user OAuth token.
        </param>
      </query>
      <request>
        <param name="title">
          The title of the reward.
        </param>
        <param name="cost" type="int">
          The cost of the reward.
        </param>
        <param name="prompt" optional="1">
          The prompt for the viewer when redeeming the reward.
        </param>
        <param name="is_enabled" type="bool" optional="1">
          Is the reward currently enabled, if false the reward won't show up to viewers. Default: true
        </param>
        <param name="background_color" optional="1">
          Custom background color for the reward. Format: Hex with # prefix. Example: `#00E5CB`.
        </param>
        <param name="is_user_input_required" type="bool" optional="1">
          Does the user need to enter information when redeeming the reward. Default: false.
        </param>
        <param name="is_max_per_stream_enabled" type="bool" optional="1">
          Whether a maximum per stream is enabled. Default: false.
        </param>
        <param name="max_per_stream" type="int" optional="1">
          The maximum number per stream if enabled. Required when any value of `is_max_per_stream_enabled` is included.
        </param>
        <param name="is_max_per_user_per_stream_enabled" type="bool" optional="1">
          Whether a maximum per user per stream is enabled. Default: false.
        </param>
        <param name="max_per_user_per_stream" type="int" optional="1">
          The maximum number per user per stream if enabled. Required when any value of `is_max_per_user_per_stream_enabled` is included.
        </param>
        <param name="is_global_cooldown_enabled" type="bool" optional="1">
          Whether a cooldown is enabled. Default: false.
        </param>
        <param name="global_cooldown_seconds" type="int" optional="1">
          The cooldown in seconds if enabled. Required when any value of `is_global_cooldown_enabled` is included.
        </param>
        <param name="should_redemptions_skip_request_queue" type="bool" optional="1">
          Should redemptions be set to FULFILLED status immediately when redeemed and skip the request queue instead of the normal UNFULFILLED status. Default: false.
        </param>
      </request>
      <response commonref="custom_reward" />
    </endpoint>
    <endpoint name="DeleteCustomReward" scope="channel:manage:redemptions" method="Delete" path="channel_points/custom_rewards">
      Deletes a Custom Reward on a channel.

      The Custom Reward specified by `id` must have been created by the `client_id` attached to the OAuth token in order to be deleted. Any `UNFULFILLED` Custom Reward Redemptions of the deleted Custom Reward will be updated to the `FULFILLED` status.
      <query>
        <param name="broadcaster_id">
          Provided `broadcaster_id` must match the `user_id` in the user OAuth token.
        </param>
        <param name="id">
          ID of the Custom Reward to delete, must match a Custom Reward on `broadcaster_id`'s channel.
        </param>
      </query>
    </endpoint>
    <endpoint name="GetCustomReward" scope="channel:read:redemptions" path="channel_points/custom_rewards">
      Returns a list of Custom Reward objects for the Custom Rewards on a channel.
      <query>
        <param name="broadcaster_id">
          Provided `broadcaster_id` must match the `user_id` in the user OAuth token.
        </param>
        <param name="id" optional="1">
          When used, this parameter filters the results and only returns reward objects for the Custom Rewards with matching ID. Maximum: 50
        </param>
        <param name="only_manageable_rewards" type="bool" optional="1">
          When set to true, only returns custom rewards that the calling `client_id` can manage. Default: false.
        </param>
      </query>
      <response commonref="custom_reward" />
    </endpoint>
    <endpoint name="GetCustomRewardRedemption" scope="channel:read:redemptions" path="custom_rewards/redemptions">
      Returns Custom Reward Redemption objects for a Custom Reward on a channel that was created by the same `client_id`.

      Developers only have access to get and update redemptions for the rewards created programmatically by the same `client_id`.
      <query>
        <param name="broadcaster_id">
          Provided `broadcaster_id` must match the `user_id` in the user OAuth token.
        </param>
        <param name="reward_id">
          When ID is not provided, this parameter returns paginated Custom Reward Redemption objects for redemptions of the Custom Reward with ID `reward_id`.
        </param>
        <param name="id" optional="1">
          When used, this param filters the results and only returns Custom Reward Redemption objects for the redemptions with matching ID. Maximum: 50
        </param>
        <param name="status" optional="1">
          When `id` is not provided, this param is required and filters the paginated Custom Reward Redemption objects for redemptions with the matching status. Can be one of UNFULFILLED, FULFILLED or CANCELED
        </param>
        <param name="sort" optional="1">
          Sort order of redemptions returned when getting the paginated Custom Reward Redemption objects for a reward. One of: OLDEST, NEWEST. Default: OLDEST.
        </param>
        <param name="after" optional="1">
          Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries without ID. If an ID is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query.
        </param>
        <param name="first" type="int" optional="1">
          Number of results to be returned when getting the paginated Custom Reward Redemption objects for a reward. Limit: 50. Default: 20.
        </param>
      </query>
      <response commonref="custom_redeem" />
    </endpoint>
    <endpoint name="UpdateCustomReward" scope="channel:manage:redemptions" method="Patch" path="channel_points/custom_rewards">
      <query>
        <param name="broadcaster_id">
          Provided `broadcaster_id` must match the `user_id` in the user OAuth token.
        </param>
        <param name="id">
          ID of the Custom Reward to update. Must match a Custom Reward on the channel of the `broadcaster_id`.
        </param>
      </query>
      <response commonref="custom_reward" />
    </endpoint>
    <endpoint name="UpdateRedemptionStatus" scope="channel:manage:redemptions" method="Patch" path="custom_rewards/redemptions">
      Updates the status of Custom Reward Redemption objects on a channel that are in the UNFULFILLED status.

      The Custom Reward Redemption specified by id must be for a Custom Reward created by the client_id attached to the user OAuth token.
      <query>
        <param name="id">
          ID of the Custom Reward Redemption to update, must match a Custom Reward Redemption on `broadcaster_id`'s channel. Maximum: 50.
        </param>
        <param name="broadcaster_id">
          Provided `broadcaster_id` must match the `user_id` in the user OAuth token.
        </param>
        <param name="reward_id">
          ID of the Custom Reward the redemptions to be updated are for.
        </param>
      </query>
      <request>
        <param name="status">
          The new status to set redemptions to. Can be either FULFILLED or CANCELED. Updating to CANCELED will refund the user their Channel Points.
        </param>
      </request>
      <response commonref="custom_redeem" />
    </endpoint>
  </collection>

  <collection name="chat">
    <endpoint name="GetChannelEmotes" path="chat/emotes">
      Gets all emotes that the specified Twitch channel created. Broadcasters create these custom emotes for users who subscribe to or follow the channel, or cheer Bits in the channel's chat window. For information about the custom emotes, see [subscriber emotes](https://help.twitch.tv/s/article/subscriber-emote-guide), [Bits tier emotes](https://help.twitch.tv/s/article/custom-bit-badges-guide?language=bg#slots), and [follower emotes](https://blog.twitch.tv/en/2021/06/04/kicking-off-10-years-with-our-biggest-emote-update-ever/).
  
      **NOTE:** With the exception of custom follower emotes, users may use custom emotes in any Twitch chat.
  
      [Learn More](https://dev.twitch.tv/docs/irc/emotes)
      <query>
        <param name="broadcaster_id">
          An ID that identifies the broadcaster to get the emotes from.
        </param>
      </query>
      <response>
        <param name="id">
          An ID that identifies the emote.
        </param>
        <param name="name">
          The name of the emote. This is the name that viewers type in the chat window to get the emote to appear.
        </param>
        <param name="images" type="object" commonref="url_sizes">
          Contains the image URLs for the emote. These image URLs will always provide a static (i.e., non-animated) emote image with a light background. **NOTE:** The preference is for you to use the templated URL in the `template` field to fetch the image instead of using these URLs.
        </param>
        <param name="tier">
          The subscriber tier at which the emote is unlocked. This field contains the tier information only if `emote_type` is set to `subscriptions`, otherwise, it's an empty string.
        </param>
        <param name="emote_type">
          The type of emote. The possible values are:
          - bitstier — Indicates a custom Bits tier emote.
          - follower — Indicates a custom follower emote.
          - subscriptions — Indicates a custom subscriber emote.
        </param>
        <param name="emote_set_id">
          An ID that identifies the emote set that the emote belongs to.
        </param>
        <param name="format" array="1">
          The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only `static`. But if it's available as a static PNG and an animated GIF, the array contains `static` and `animated`. The possible formats are:
          - animated — Indicates an animated GIF is available for this emote.
          - static — Indicates a static PNG file is available for this emote.
        </param>
        <param name="scale" array="1">
          The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0. Possible sizes are:
          - 1.0 — A small version (28px x 28px) is available.
          - 2.0 — A medium version (56px x 56px) is available.
          - 3.0 — A large version (112px x 112px) is available.
        </param>
        <param name="theme_mode" array="1">
          The background themes that the emote is available in. Possible themes are:
          - dark
          - light
        </param>
      </response>
    </endpoint>
    <endpoint name="GetGlobalEmotes" path="chat/emotes/global">
      Gets all [global emotes](https://www.twitch.tv/creatorcamp/en/learn-the-basics/emotes/). Global emotes are Twitch-created emoticons that users can use in any Twitch chat.

      [Learn More](https://dev.twitch.tv/docs/irc/emotes)
      <response>
        <param name="id">
          An ID that identifies the emote.
        </param>
        <param name="name">
          The name of the emote. This is the name that viewers type in the chat window to get the emote to appear.
        </param>
        <param name="images" type="object" commonref="url_sizes">
          Contains the image URLs for the emote. These image URLs will always provide a static (i.e., non-animated) emote image with a light background. **NOTE:** The preference is for you to use the templated URL in the `template` field to fetch the image instead of using these URLs.
        </param>
        <param name="format" array="1">
          The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only `static`. But if it's available as a static PNG and an animated GIF, the array contains `static` and `animated`. The possible formats are:
          - animated — Indicates an animated GIF is available for this emote.
          - static — Indicates a static PNG file is available for this emote.
        </param>
        <param name="scale" array="1">
          The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0. Possible sizes are:
          - 1.0 — A small version (28px x 28px) is available.
          - 2.0 — A medium version (56px x 56px) is available.
          - 3.0 — A large version (112px x 112px) is available.
        </param>
        <param name="theme_mode" array="1">
          The background themes that the emote is available in. Possible themes are:
          - dark
          - light
        </param>
      </response>
    </endpoint>
    <endpoint name="GetEmoteSets" path="chat/emotes/set">
      Gets emotes for one or more specified emote sets.

      An emote set groups emotes that have a similar context. For example, Twitch places all the subscriber emotes that a broadcaster uploads for their channel in the same emote set.

      [Learn More](https://dev.twitch.tv/docs/irc/emotes)
      <query>
        <param name="emote_set_id">
          An ID that identifies the emote set. Include the parameter for each emote set you want to get. For example, `emote_set_id=1234&amp;emote_set_id=5678`. You may specify a maximum of 25 IDs.
        </param>
      </query>
      <response>
        <param name="id">
          An ID that identifies the emote.
        </param>
        <param name="name">
          The name of the emote. This is the name that viewers type in the chat window to get the emote to appear.
        </param>
        <param name="images" type="object" commonref="url_sizes">
          Contains the image URLs for the emote. These image URLs will always provide a static (i.e., non-animated) emote image with a light background. **NOTE:** The preference is for you to use the templated URL in the `template` field to fetch the image instead of using these URLs.
        </param>
        <param name="tier">
          The subscriber tier at which the emote is unlocked. This field contains the tier information only if `emote_type` is set to `subscriptions`, otherwise, it's an empty string.
        </param>
        <param name="emote_type">
          The type of emote. The possible values are:
          - bitstier — Indicates a custom Bits tier emote.
          - follower — Indicates a custom follower emote.
          - subscriptions — Indicates a custom subscriber emote.
        </param>
        <param name="emote_set_id">
          An ID that identifies the emote set that the emote belongs to.
        </param>
        <param name="format" array="1">
          The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only `static`. But if it's available as a static PNG and an animated GIF, the array contains `static` and `animated`. The possible formats are:
          - animated — Indicates an animated GIF is available for this emote.
          - static — Indicates a static PNG file is available for this emote.
        </param>
        <param name="scale" array="1">
          The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0. Possible sizes are:
          - 1.0 — A small version (28px x 28px) is available.
          - 2.0 — A medium version (56px x 56px) is available.
          - 3.0 — A large version (112px x 112px) is available.
        </param>
        <param name="theme_mode" array="1">
          The background themes that the emote is available in. Possible themes are:
          - dark
          - light
        </param>
      </response>
    </endpoint>
    <endpoint name="GetChannelChatBadges" path="chat/badges">
      Gets a list of custom chat badges that can be used in chat for the specified channel. This includes [subscriber badges](https://help.twitch.tv/s/article/subscriber-badge-guide) and [Bit badges](https://help.twitch.tv/s/article/custom-bit-badges-guide).
      <query>
        <param name="broadcaster_id">
          The broadcaster whose chat badges are being requested. Provided `broadcaster_id` must match the `user_id` in the user OAuth token.
        </param>
      </query>
      <response>
        <param name="set_id">
          ID for the chat badge set.
        </param>
        <param name="versions" type="object" commonref="url_sizes_and_id">
          Contains chat badge objects for the set.
        </param>
      </response>
    </endpoint>
    <endpoint name="GetGlobalChatBadges" path="chat/badges/global">
      Gets a list of chat badges that can be used in chat for any channel.
      <response>
        <param name="set_id">
          ID for the chat badge set.
        </param>
        <param name="versions" type="object" commonref="url_sizes_and_id">
          Contains chat badge objects for the set.
        </param>
      </response>
    </endpoint>
    <endpoint name="GetChatSettings" path="chat/settings">
      Gets the broadcaster's chat settings.

      For an overview of chat settings, see [Chat Commands for Broadcasters and Moderators](https://help.twitch.tv/s/article/chat-commands#AllMods) and [Moderator Preferences](https://help.twitch.tv/s/article/setting-up-moderation-for-your-twitch-channel#modpreferences).
      <query>
        <param name="broadcaster_id">
          The ID of the broadcaster whose chat settings you want to get.
        </param>
        <param name="moderator_id" optional="1">
          Required only to access the `non_moderator_chat_delay` or `non_moderator_chat_delay_duration` settings.

          The ID of a user that has permission to moderate the broadcaster's chat room. This ID must match the user ID associated with the user OAuth token.

          If the broadcaster wants to get their own settings (instead of having the moderator do it), set this parameter to the broadcaster's ID, too.
        </param>
      </query>
      <response>
        <param name="broadcaster_id">
          The ID of the broadcaster specified in the request.
        </param>
        <param name="emote_mode" type="bool">
          A Boolean value that determines whether chat messages must contain only emotes. Is **true**, if only messages that are 100% emotes are allowed; otherwise, **false**.
        </param>
        <param name="follower_mode" type="bool">
          A Boolean value that determines whether the broadcaster restricts the chat room to followers only, based on how long they've followed.

          Is **true**, if the broadcaster restricts the chat room to followers only; otherwise, **false**.

          See `follower_mode_duration` for how long the followers must have followed the broadcaster to participate in the chat room.
        </param>
        <param name="follower_mode_duration" type="int" optional="1">
          The length of time, in minutes, that the followers must have followed the broadcaster to participate in the chat room. See `follower_mode`.

          Is **null** if follower_mode is false.
        </param>
        <param name="slow_mode" type="bool">
          A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages.

          Is **true**, if the broadcaster applies a delay; otherwise, **false**.

          See `slow_mode_wait_time` for the delay.
        </param>
        <param name="slow_mode_wait_time" type="int" optional="1">
          The amount of time, in seconds, that users need to wait between sending messages. See `slow_mode`.

          Is **null** if slow_mode is **false**.
        </param>
        <param name="unique_chat_mode" type="bool">
          A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.

          Is **true**, if the broadcaster requires unique messages only; otherwise, **false**.
        </param>
        <param name="moderator_id" optional="1">
          The moderator's ID. The response includes this field only if the request specifies a User access token that includes the **moderator:read:chat_settings** scope.
        </param>
        <param name="non_moderator_chat_delay" type="bool" optional="1">
          A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message.

          Is **true**, if the broadcaster applies a delay; otherwise, **false**.

          See `non_moderator_chat_delay_duration` for the length of the delay.

          The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat_settings** scope and the user in the *moderator_id* query parameter is one of the broadcaster's moderators.
        </param>
        <param name="non_moderator_chat_delay_duration" type="int" optional="1">
          The amount of time, in seconds, that messages are delayed from appearing in chat. See `non_moderator_chat_delay`.

          Is **null** if non_moderator_chat_delay is **false**.

          The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat_settings** scope and the user in the *moderator_id* query parameter is one of the broadcaster's moderators.
        </param>
      </response>
    </endpoint>
    <endpoint name="UpdateChatSettings" scope="moderator:manage:chat_settings" method="Patch" path="chat/settings">
      Updates the broadcaster's chat settings.

      In the request body, specify only those fields that you want to update.
      <query>
        <param name="broadcaster_id">
          The ID of the broadcaster whose chat settings you want to update. This ID must match the user ID associated with the user OAuth token.
        </param>
        <param name="moderator_id">
          The ID of a user that has permission to moderate the broadcaster's chat room. This ID must match the user ID associated with the user OAuth token.

          If the broadcaster wants to update their own settings (instead of having the moderator do it), set this parameter to the broadcaster's ID, too.
        </param>
      </query>
      <request>
        <param name="emote_mode" type="bool" optional="1">
          A Boolean value that determines whether chat messages must contain only emotes.

          Set to **true**, if only messages that are 100% emotes are allowed; otherwise, false. Default is **false**.
        </param>
        <param name="follower_mode" type="bool" optional="1">
          A Boolean value that determines whether the broadcaster restricts the chat room to followers only, based on how long they've followed.

          Set to **true**, if the broadcaster restricts the chat room to followers only; otherwise, **false**. Default is **true**.

          See `follower_mode_duration` for how long the followers must have followed the broadcaster to participate in the chat room.
        </param>
        <param name="follower_mode_duration" type="int" optional="1">
          The length of time, in minutes, that the followers must have followed the broadcaster to participate in the chat room (see `follower_mode`).

          You may specify a value in the range: 0 (no restriction) through 129600 (3 months). The default is 0.
        </param>
        <param name="non_moderator_chat_delay" type="bool" optional="1">
          A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message.

          Set to true, if the broadcaster applies a delay; otherwise, false. Default is false.

          See non_moderator_chat_delay_duration for the length of the delay.
        </param>
        <param name="non_moderator_chat_delay_duration" type="int" optional="1">
          The amount of time, in seconds, that messages are delayed from appearing in chat.

          Possible values are:
          - 2 — 2 second delay (recommended)
          - 4 — 4 second delay
          - 6 — 6 second delay

          See `non_moderator_chat_delay`.
        </param>
        <param name="slow_mode" type="bool" optional="1">
          A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages.

          Set to **true**, if the broadcaster applies a wait period messages; otherwise, **false**. Default is **false**.

          See `slow_mode_wait_time` for the delay.
        </param>
        <param name="slow_mode_wait_time" type="int" optional="1">
          The amount of time, in seconds, that users need to wait between sending messages (see `slow_mode`).

          You may specify a value in the range: 3 (3 second delay) through 120 (2 minute delay). The default is 30 seconds.
        </param>
        <param name="subscriber_mode" type="bool" optional="1">
          A Boolean value that determines whether only users that subscribe to the broadcaster's channel can talk in the chat room.

          Set to **true**, if the broadcaster restricts the chat room to subscribers only; otherwise, **false**. Default is **false**.
        </param>
        <param name="unique_chat_mode" type="bool" optional="1">
          A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.

          Set to **true**, if the broadcaster requires unique messages only; otherwise, **false**. Default is **false**.
        </param>
      </request>
      <response>
        <param name="broadcaster_id">
          The ID of the broadcaster specified in the request.
        </param>
        <param name="emote_mode" type="bool">
          A Boolean value that determines whether chat messages must contain only emotes. Is **true**, if only messages that are 100% emotes are allowed; otherwise, **false**.
        </param>
        <param name="follower_mode" type="bool">
          A Boolean value that determines whether the broadcaster restricts the chat room to followers only, based on how long they've followed.

          Is **true**, if the broadcaster restricts the chat room to followers only; otherwise, **false**.

          See `follower_mode_duration` for how long the followers must have followed the broadcaster to participate in the chat room.
        </param>
        <param name="follower_mode_duration" type="int" optional="1">
          The length of time, in minutes, that the followers must have followed the broadcaster to participate in the chat room. See `follower_mode`.

          Is **null** if follower_mode is false.
        </param>
        <param name="slow_mode" type="bool">
          A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages.

          Is **true**, if the broadcaster applies a delay; otherwise, **false**.

          See `slow_mode_wait_time` for the delay.
        </param>
        <param name="slow_mode_wait_time" type="int" optional="1">
          The amount of time, in seconds, that users need to wait between sending messages. See `slow_mode`.

          Is **null** if slow_mode is **false**.
        </param>
        <param name="unique_chat_mode" type="bool">
          A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.

          Is **true**, if the broadcaster requires unique messages only; otherwise, **false**.
        </param>
        <param name="moderator_id" optional="1">
          The moderator's ID. The response includes this field only if the request specifies a User access token that includes the **moderator:read:chat_settings** scope.
        </param>
        <param name="non_moderator_chat_delay" type="bool" optional="1">
          A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message.

          Is **true**, if the broadcaster applies a delay; otherwise, **false**.

          See `non_moderator_chat_delay_duration` for the length of the delay.

          The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat_settings** scope and the user in the *moderator_id* query parameter is one of the broadcaster's moderators.
        </param>
        <param name="non_moderator_chat_delay_duration" type="int" optional="1">
          The amount of time, in seconds, that messages are delayed from appearing in chat. See `non_moderator_chat_delay`.

          Is **null** if non_moderator_chat_delay is **false**.

          The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat_settings** scope and the user in the *moderator_id* query parameter is one of the broadcaster's moderators.
        </param>
      </response>
    </endpoint>
    <endpoint name="SendChatAnnouncement" scope="moderator:manage:announcements" method="Post" path="chat/announcements">
      Sends an announcement to the broadcaster's chat room.
      <query>
        <param name="broadcaster_id">
          The ID of the broadcaster that owns the chat room to send the announcement to.
        </param>
        <param name="moderator_id">
          The ID of a user who has permission to moderate the broadcaster's chat room. This ID must match the user ID in the OAuth token, which can be a moderator or the broadcaster.
        </param>
      </query>
      <request>
        <param name="message">
          The announcement to make in the broadcaster's chat room. Announcements are limited to a maximum of 500 characters; announcements longer than 500 characters are truncated.
        </param>
        <param name="color">
          The color used to highlight the announcement. Possible case-sensitive values are:
          - blue
          - green
          - orange
          - purple
          - primary (default)

          If `color` is set to primary or is not set, the channel's accent color is used to highlight the announcement (see **Profile Accent Color** under profile settings, **Channel and Videos**, and **Brand**).
        </param>
      </request>
      <nullresponse />
    </endpoint>
    <endpoint name="GetUserChatColor" path="chat/color">
      Gets the color used for the user's name in chat.
      <query>
        <param name="user_id">
          The ID of the user whose color you want to get. To specify more than one user, include the user_id parameter for each user to get. For example, `&amp;user_id=1234&amp;user_id=5678`. The maximum number of IDs that you may specify is 100.

          The response ignores duplicate IDs and IDs that aren't found.
        </param>
      </query>
      <response>
        <param name="user_id">
          The ID of the user.
        </param>
        <param name="user_login">
          The user's login name.
        </param>
        <param name="user_name">
          The user's display name.
        </param>
        <param name="color">
          The Hex color code that the user uses in chat for their name. If the user hasn't specified a color in their settings, the string is empty.
        </param>
      </response>
    </endpoint>
    <endpoint name="UpdateUserChatColor" scope="user:manage:chat_color" method="Put" path="chat/color">
      Updates the color used for the user's name in chat.
      <query>
        <param name="user_id">
          The ID of the user whose chat color you want to update.
        </param>
        <param name="color">
          The color to use for the user's name in chat. All users may specify one of the following named color values.
          - blue
          - blue_violet
          - cadet_blue
          - chocolate
          - coral
          - dodger_blue
          - firebrick
          - golden_rod
          - green
          - hot_pink
          - orange_red
          - red
          - sea_green
          - spring_green
          - yellow_green

          Turbo and Prime users may specify a named color or a Hex color code like #9146FF.
        </param>
      </query>
      <nullresponse />
    </endpoint>
  </collection>

  <collection name="clips">
    <endpoint name="CreateClip" scope="clips:edit" method="Post" path="clips">
      Creates a clip programmatically. This returns both an ID and an edit URL for the new clip.

      **Note:** The clips service returns a maximum of 1000 clips,

      Clip creation takes time. We recommend that you query Get Clips, with the clip ID that is returned here. If Get Clips returns a valid clip, your clip creation was successful. If, after 15 seconds, you still have not gotten back a valid clip from Get Clips, assume that the clip was not created and retry Create Clip.

      This endpoint has a global rate limit, across all callers. The limit may change over time, but the response includes informative headers:

      ```
      Ratelimit-Helixclipscreation-Limit: &lt;int value&gt;
      Ratelimit-Helixclipscreation-Remaining: &lt;int value&gt;
      ```
      <query>
        <param name="broadcaster_id">
          ID of the stream from which the clip will be made.
        </param>
        <param name="has_delay" type="bool" optional="1">
          If `false`, the clip is captured from the live stream when the API is called; otherwise, a delay is added before the clip is captured (to account for the brief delay between the broadcaster's stream and the viewer's experience of that stream). Default: `false`.
        </param>
      </query>
      <response>
        <param name="id">
          ID of the clip that was created.
        </param>
        <param name="edit_url">
          URL of the edit page for the clip.
        </param>
      </response>
    </endpoint>
    <endpoint name="GetClips" path="clips">
      Gets clip information by clip ID (one or more), broadcaster ID (one only), or game ID (one only).

      **Note:** The clips service returns a maximum of 1000 clips.

      The response has a JSON payload with a `data` field containing an array of clip information elements and a `pagination` field containing information required to query for more streams.

      For a query to be valid, `id` (one or more), `broadcaster_id`, or `game_id` must be specified. You may specify only one of these parameters.
      <query>
        <param name="broadcaster_id" optional="1">
          ID of the broadcaster for whom clips are returned. The number of clips returned is determined by the `first` query-string parameter (default: 20). Results are ordered by view count.
        </param>
        <param name="game_id" optional="1">
          ID of the game for which clips are returned. The number of clips returned is determined by the `first` query-string parameter (default: 20). Results are ordered by view count.
        </param>
        <param name="id" optional="1">
          ID of the clip being queried. Limit: 100.
        </param>
        <param name="after" optional="1">
          Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries specifying `broadcaster_id` or `game_id`. The cursor value specified here is from the `pagination` response field of a prior query.
        </param>
        <param name="before" optional="1">
          Cursor for backward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries specifying `broadcaster_id` or `game_id`. The cursor value specified here is from the `pagination` response field of a prior query.
        </param>
        <param name="ended_at" optional="1">
          Ending date/time for returned clips, in RFC3339 format. (Note that the seconds value is ignored.) If this is specified, `started_at` also must be specified; otherwise, the time period is ignored.
        </param>
        <param name="first" type="int" optional="1">
          Maximum number of objects to return. Maximum: 100. Default: 20.
        </param>
        <param name="started_at" optional="1">
          Starting date/time for returned clips, in RFC3339 format. (The seconds value is ignored.) If this is specified, `ended_at` also should be specified; otherwise, the `ended_at` date/time will be 1 week after the `started_at` value.
        </param>
      </query>
      <response>
        <param name="id">
          ID of the clip being queried.
        </param>
        <param name="url">
          URL where the clip can be viewed.
        </param>
        <param name="embed_url">
          URL to embed the clip.
        </param>
        <param name="broadcaster_id">
          User ID of the stream from which the clip was created.
        </param>
        <param name="broadcaster_name">
          Display name corresponding to `broadcaster_id`.
        </param>
        <param name="creator_id">
          ID of the user who created the clip.
        </param>
        <param name="creator_name">
          Display name corresponding to `creator_id`.
        </param>
        <param name="video_id">
          ID of the video from which the clip was created. This field contains an empty string if the video is not available.
        </param>
        <param name="game_id">
          ID of the game assigned to the stream when the clip was created.
        </param>
        <param name="language">
          Language of the stream from which the clip was created. A language value is either the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) two-letter code for a [supported stream language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang) or “other”.
        </param>
        <param name="title">
          Title of the clip.
        </param>
        <param name="view_count" type="int">
          Number of times the clip has been viewed.
        </param>
        <param name="created_at">
          Date when the clip was created.
        </param>
        <param name="thumbnail_url">
          URL of the clip thumbnail.
        </param>
        <param name="duration" type="float">
          Duration of the Clip in seconds (up to 0.1 precision).
        </param>
        <param name="vod_offset" type="int">
          The zero-based offset, in seconds, to where the clip starts in the video (VOD). Is **null** if the video is not available or hasn't been created yet from the live stream. See `video_id`.

          Note that there's a delay between when a clip is created during a broadcast and when the offset is set. During the delay period, `vod_offset` is **null**. The delay is indeterminant but is typically minutes long.
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="entitlements">
    <endpoint name="GetCodeStatus" path="entitlements/codes">
      Gets the status of one or more provided codes. This API requires that the caller is an authenticated Twitch user. The API is throttled to one request per second per authenticated user. Codes are redeemable alphanumeric strings tied only to the bits product. This third-party API allows other parties to redeem codes on behalf of users. Third-party app and extension developers can use the API to provide rewards of bits from within their games.

      We provide sets of codes to the third party as part of a contract agreement. The third-party program then calls this API to credit a Twitch user by submitting any specific codes. This means that a bits reward can be applied without users having to follow any manual steps.

      All codes are single-use. Once a code has been redeemed, via either this API or the site page, then the code is no longer valid for any further use.
      <query>
        <param name="code">
          The code to get the status of. Repeat this query parameter additional times to get the status of multiple codes.
          Ex: `?code=code1&amp;code=code2`
          1-20 code parameters are allowed.
        </param>
        <param name="user_id">
          Represents a numeric Twitch user ID.
          The user account which is going to receive the entitlement associated with the code.
        </param>
      </query>
      <response>
        <param name="code">
          The code being checked.
        </param>
        <param name="status">
          Indicates the success or error state of each key when redeeming.

          **Code Statuses**
          |Code|Description|
          |-|-|
          |`SUCCESSFULLY_REDEEMED`|Request successfully redeemed this code to the authenticated user's account. This status will only ever be encountered when calling the POST API to redeem a key.|
          |`ALREADY_CLAIMED`|Code has already been claimed by a Twitch user.|
          |`EXPIRED`|Code has expired and can no longer be claimed.|
          |`USER_NOT_ELIGIBLE`|User is not eligible to redeem this code.|
          |`NOT_FOUND`|Code is not valid and/or does not exist in our database.|
          |`INACTIVE`|Code is not currently active.|
          |`UNUSED`|Code has not been claimed.This status will only ever be encountered when calling the GET API to get a keys status.|
          |`INCORRECT_FORMAT`|Code was not properly formatted.|
          |`INTERNAL_ERROR`|Indicates some internal and/or unknown failure handling this code.|
        </param>
      </response>
    </endpoint>
    <endpoint name="GetDropsEntitlements" path="entitlements/drops">
      Gets a list of entitlements for a given organization that have been granted to a game, user, or both.

      Valid combinations of requests are:
      |Authorization Provided|Request Fields Present|Data Returned|
      |-|-|
      |**App Access OAuth Token**|No fields|All entitlements with benefits owned by your organization.|
      ||`user_id`|All entitlements for a user with benefits owned by your organization.|
      ||`user_id`, `game_id`|All entitlements for the game granted to a user. Your organization must own the game.|
      ||`game_id`|All entitlements for all users for a game. Your organization must own the game.|
      |**User OAuth Token**|No fields|All entitlements owned by that user with benefits owned by your organization.|
      ||`user_id`|Invalid.|
      ||`user_id`, `game_id`|Invalid.|
      ||`game_id`|All entitlements owned by a user for the specified game. Your organization must own the game.|
      <query>
        <param name="id" optional="1">
          Unique identifier of the entitlement.
        </param>
        <param name="user_id" optional="1">
          A Twitch user ID.
        </param>
        <param name="game_id" optional="1">
          A Twitch game ID.
        </param>
        <param name="fulfillment_status" optional="1">
          An optional fulfillment status used to filter entitlements. Valid values are `"CLAIMED"` or `"FULFILLED"`.
        </param>
        <param name="after" optional="1">
          The cursor used to fetch the next page of data.
        </param>
        <param name="first" type="int" optional="1">
          Maximum number of entitlements to return.

          Default: 20
          Max: 1000
        </param>
      </query>
      <response>
        <param name="id">
          Unique identifier of the entitlement.
        </param>
        <param name="benefit_id">
          Identifier of the benefit.
        </param>
        <param name="timestamp">
          UTC timestamp in ISO format when this entitlement was granted on Twitch.
        </param>
        <param name="user_id">
          Twitch user ID of the user who was granted the entitlement.
        </param>
        <param name="game_id">
          Twitch game ID of the game that was being played when this benefit was entitled.
        </param>
        <param name="fulfillment_status">
          The fulfillment status of the entitlement as determined by the game developer. Valid values are `"CLAIMED"` or `"FULFILLED"`.
        </param>
        <param name="updated_at">
          UTC timestamp in ISO format for when this entitlement was last updated.
        </param>
      </response>
    </endpoint>
    <endpoint name="UpdateDropsEntitlements" method="Patch" path="entitlements/drops">
      Updates the fulfillment status on a set of Drops entitlements, specified by their entitlement IDs.

      Valid combinations of requests are:
      |Authorization Provided|Data Returned|
      |-|-|
      |App Access OAuth Token|All entitlements with benefits owned by your organization.|
      |User OAuth Token|All entitlements owned by that user with benefits owned by your organization.|
      <request>
        <param name="entitlement_ids" array="1">
          An array of unique identifiers of the entitlements to update.

          Maximum: 100.
        </param>
        <param name="fulfillment_status">
          A fulfillment status. Valid values are `"CLAIMED"` or `"FULFILLED"`.
        </param>
      </request>
      <response>
        <param name="status">
          Status code applied to a set of entitlements for the update operation that can be used to indicate partial success. Valid values are:
          |Code|Description|
          |-|-|
          |`SUCCESS`|Entitlement was successfully updated.|
          |`INVALID_ID`|Invalid format for entitlement ID.|
          |`NOT_FOUND`|Entitlement ID does not exist.|
          |`UNAUTHORIZED`|Entitlement is not owned by the organization or the user when called with a user OAuth token.|
          |`UPDATE_FAILED`|Indicates the entitlement update operation failed. Errors in the this state are expected to be be transient and should be retried later.|
        </param>
        <param name="id" array="1">
          Array of unique identifiers of the entitlements for the specified status.
        </param>
      </response>
    </endpoint>
    <endpoint name="RedeemCode" method="Post" path="entitlements/codes">
      Redeems one or more redemption codes. Redeeming a code credits the user’s account with the entitlement associated with the code. For example, a Bits reward earned when playing a game.

      Rate limit: You may send at most one request per second per user.
      <query>
        <param name="code">
          The redemption code to redeem. To redeem multiple codes, include this parameter for each redemption code. For example, `code=1234&amp;code=5678`. You may specify a maximum of 20 codes.
        </param>
        <param name="user_id">
          The ID of the user that owns the redemption code to redeem.
        </param>
      </query>
      <response>
        <param name="code">
          The redemption code.
        </param>
        <param name="status">
          The redemption code's status. Possible values are:
          - ALREADY_CLAIMED — The code has already been claimed. All codes are single-use.
          - EXPIRED — The code has expired and can no longer be claimed.
          - INACTIVE — The code has not been activated.
          - INCORRECT_FORMAT — The code is not properly formatted.
          - INTERNAL_ERROR — An internal or unknown error occurred when accessing the code.
          - NOT_FOUND — The code was not found.
          - SUCCESSFULLY_REDEEMED — Successfully redeemed the code and credited the user's account with the entitlement.
          - UNUSED — The code has not been claimed.
          - USER_NOT_ELIGIBLE — The user is not eligible to redeem this code.
        </param>
      </response>
    </endpoint>
  </collection>

  <!-- TODO: Extension collection (most of these endpoints require JWTs, which are not implemented in this client -->

  <collection name="eventsub" method="Post" path="eventsub/subscriptions">
    <endpoint name="CreateEventSubDescription">
      Creates an EventSub subscription.

      To create a subscription, you must use an app access token; however, if the subscription type requires user authorization, the user must have granted your app permissions to receive those events before you subscribe to them. For example, to subscribe to channel.subscribe events, the user must have granted your app permission which adds the `channel:read:subscriptions` scope to your app's client ID.
      <request>
        <param name="type">
          The type of subscription to create. For a list of subscriptions you can create, see [Subscription Types](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#subscription-types). Set `type` to the value in the **Name** column of the Subscription Types table.
        </param>
        <param name="version">
          The version of the subscription type used in this request. A subscription type could define one or more object definitions, so you need to specify which definition you’re using.
        </param>
        <param name="condition" type="map">
          The parameter values that are specific to the specified subscription type.
        </param>
        <param name="transport" type="object" commonref="eventsub_transport">
          The transport details, such as the transport method and callback URL, that you want Twitch to use when sending you notifications.
        </param>
      </request>
      <response>
        <param name="id">
          An ID that identifies the subscription.
        </param>
        <param name="status">
          The status of the create subscription request. Possible values are:
          - enabled — The subscription is enabled.
          - webhook_callback_verification_pending — The subscription is pending verification of the specified callback URL. To determine if the subscription moved from pending to another state, send a GET request and use the ID to find the subscription in the list.
          - webhook_callback_verification_failed — The specified callback URL failed verification.
          - notification_failures_exceeded — The notification delivery failure rate was too high.
          - authorization_revoked — The authorization was revoked for one or more users specified in the Condition object.
          - user_removed — One of the users specified in the Condition object was removed.
        </param>
        <param name="type">
          The type of subscription.
        </param>
        <param name="version">
          The version of the subscription type.
        </param>
        <param name="condition" type="map">
          The parameter values for the subscription type.
        </param>
        <param name="created_at" type="string">
          The [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) timestamp indicating when the subscription was created.
        </param>
        <param name="transport" type="object" commonref="eventsub_transport">
          The transport details used to send you notifications.
        </param>
        <param name="cost" type="int">
          The amount that the subscription counts against your limit. [Learn More](https://dev.twitch.tv/docs/eventsub/manage-subscriptions/#subscription-limits)
        </param>
      </response>
    </endpoint>
    <endpoint name="DeleteEventSubSubscription" method="Delete" path="eventsub/subscriptions">
      Deletes an EventSub subscription.
      <query>
        <param name="id">
          The ID of the subscription to delete. This is the ID that Create Eventsub Subscription returns.
        </param>
      </query>
    </endpoint>
    <endpoint name="GetEventSubSubscriptions" path="eventsub/subscriptions">
      Gets a list of your EventSub subscriptions. The list is paginated and ordered by the oldest subscription first.
      <query>
        <param name="status" optional="1">
          Filter subscriptions by its status. Possible values are:
          - enabled — The subscription is enabled.
          - webhook_callback_verification_pending — The subscription is pending verification of the specified callback URL.
          - webhook_callback_verification_failed — The specified callback URL failed verification.
          - notification_failures_exceeded — The notification delivery failure rate was too high.
          - authorization_revoked — The authorization was revoked for one or more users specified in the Condition object.
          - user_removed — One of the users specified in the Condition object was removed.
        </param>
        <param name="type" optional="1">
          Filter subscriptions by subscription type (e.g., `channel.update`). For a list of subscription types, see [Subscription Types](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#subscription-types).
        </param>
        <param name="user_id" optional="1">
          Filter subscriptions by user ID. The response contains subscriptions where the user ID matches a user ID that you specified in the **Condition** object when you created the subscription.
        </param>
        <param name="after" optional="1">
          The cursor used to get the next page of results. The `pagination` object in the response contains the cursor's value.
        </param>
      </query>
      <response>
        <param name="id">
          An ID that identifies the subscription.
        </param>
        <param name="status">
          The status of the create subscription request. Possible values are:
          - enabled — The subscription is enabled.
          - webhook_callback_verification_pending — The subscription is pending verification of the specified callback URL. To determine if the subscription moved from pending to another state, send a GET request and use the ID to find the subscription in the list.
          - webhook_callback_verification_failed — The specified callback URL failed verification.
          - notification_failures_exceeded — The notification delivery failure rate was too high.
          - authorization_revoked — The authorization was revoked for one or more users specified in the Condition object.
          - user_removed — One of the users specified in the Condition object was removed.
        </param>
        <param name="type">
          The type of subscription.
        </param>
        <param name="version">
          The version of the subscription type.
        </param>
        <param name="condition" type="map">
          The parameter values for the subscription type.
        </param>
        <param name="created_at" type="string">
          The [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) timestamp indicating when the subscription was created.
        </param>
        <param name="transport" type="object" commonref="eventsub_transport">
          The transport details used to send you notifications.
        </param>
        <param name="cost" type="int">
          The amount that the subscription counts against your limit. [Learn More](https://dev.twitch.tv/docs/eventsub/manage-subscriptions/#subscription-limits)
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="games">
    <endpoint name="GetTopGames" path="games/top">
      Gets games sorted by number of current viewers on Twitch, most popular first.

      The response has a JSON payload with a `data` field containing an array of games information elements and a `pagination` field containing information required to query for more streams.
      <query>
        <param name="after" optional="1">
          Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the `pagination` response field of a prior query.
        </param>
        <param name="before" optional="1">
          Cursor for backward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the `pagination` response field of a prior query.
        </param>
        <param name="first" optional="1">
          Maximum number of objects to return. Maximum: 100. Default: 20.
        </param>
      </query>
      <response>
        <param name="id">
          Game ID.
        </param>
        <param name="name">
          Game name.
        </param>
        <param name="box_art_url">
          Template URL for a game's box art.
        </param>
      </response>
    </endpoint>
    <endpoint name="GetGames" path="games">
      Gets game information by game ID or name.

      The response has a JSON payload with a `data` field containing an array of games elements.

      For a query to be valid, `name` and/or `id` must be specified.
      <query>
        <param name="id" optional="1">
          Game ID. At most 100 `id` values can be specified.
        </param>
        <param name="name" optional="1">
          Game name. The name must be an exact match. For example, “Pokemon” will not return a list of Pokemon games; instead, query any specific Pokemon games in which you are interested. At most 100 `name` values can be specified.
        </param>
      </query>
      <response>
        <param name="id">
          Game ID.
        </param>
        <param name="name">
          Game name.
        </param>
        <param name="box_art_url">
          Template URL for a game's box art.
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="goals">
    <endpoint name="GetCreatorGoals" scope="channel:read:goals" path="goals">
      Gets the broadcaster's list of active goals. Use this to get the current progress of each goal.

      Alternatively, you can subscribe to receive notifications when a goal makes progress using the [channel.goal.progress](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#channelgoalprogress) subscription type. [Read more](https://dev.twitch.tv/docs/api/goals#requesting-event-notifications)
      <query>
        <param name="broadcaster_id">
          The ID of the broadcaster that created the goals. The ID must match the user ID associated with the user OAuth token. In other words, only the broadcaster can see their goals.
        </param>
      </query>
      <response>
        <param name="id">
          An ID that uniquely identifies this goal.
        </param>
        <param name="broadcaster_id">
          An ID that uniquely identifies the broadcaster.
        </param>
        <param name="broadcaster_name">
          The broadcaster's display name.
        </param>
        <param name="broadcaster_login">
          The broadcaster's user handle.
        </param>
        <param name="type">
          The type of goal. Possible values are:
          - follower — The goal is to increase followers.
          - subscription — The goal is to increase subscriptions. This type shows the net increase or decrease in tier points associated with the subscriptions.
          - subscription_count — The goal is to increase subscriptions. This type shows the net increase or decrease in the number of subscriptions.
          - new_subscription — The goal is to increase subscriptions. This type shows only the net increase in tier points associated with the subscriptions (it does not account for users that unsubscribed since the goal started).
          - new_subscription_count — The goal is to increase subscriptions. This type shows only the net increase in the number of subscriptions (it does not account for users that unsubscribed since the goal started).
        </param>
        <param name="description">
          A description of the goal, if specified. The description may contain a maximum of 40 characters.
        </param>
        <param name="current_amount" type="int">
          The goal's current value.

          The goal's type determines how this value is increased or decreased.
          - If `type` is follower, this field is set to the broadcaster's current number of followers. This number increases with new followers and decreases when users unfollow the broadcaster.
          - If `type` is subscription, this field is increased and decreased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased or decreased by 2, not 1.
          - If `type` is subscription_count, this field is increased by 1 for each new subscription and decreased by 1 for each user that unsubscribes.
          - If `type` is new_subscription, this field is increased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased by 2, not 1.
          - If `type` is new_subscription_count, this field is increased by 1 for each new subscription.
        </param>
        <param name="target_amount" type="int">
          The goal's target value. For example, if the broadcaster has 200 followers before creating the goal, and their goal is to double that number, this field is set to 400.
        </param>
        <param name="created_at">
          The UTC timestamp in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format, which indicates when the broadcaster created the goal.
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="hypetrain">
    <endpoint name="GetHypeTrainEvents" scope="channel:read:hype_train" path="hypetrain/events">
      Gets the information of the most recent Hype Train of the given channel ID. When there is currently an active Hype Train, it returns information about that Hype Train. When there is currently no active Hype Train, it returns information about the most recent Hype Train. After 5 days, if no Hype Train has been active, the endpoint will return an empty response.
      <query>
        <param name="broadcaster_id">
          User ID of the broadcaster. Must match the User ID in the Bearer token if User Token is used.
        </param>
        <param name="first" type="int" optional="1">
          Maximum number of objects to return. Maximum: 100. Default: 1.
        </param>
        <param name="cursor" optional="1">
          Cursor for forward pagination: tells the server where to start fetching the next set of results in a multi-page response. This applies only to queries without id. If an ID is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query.
        </param>
      </query>
      <response>
        <param name="id">
          The distinct ID of the event
        </param>
        <param name="event_type">
          Displays hypetrain.{event_name}, currently only hypetrain.progression
        </param>
        <param name="event_timestamp">
          RFC3339 formatted timestamp of event
        </param>
        <param name="version">
          Returns the version of the endpoint
        </param>
        <param name="event_data" type="object">
          Data pertaining to the event.
          <param name="id">
            The distinct ID of this Hype Train
          </param>
          <param name="broadcaster_id">
            Channel ID of which Hype Train events the clients are interested in
          </param>
          <param name="started_at">
            RFC3339 formatted timestamp of when this Hype Train started
          </param>
          <param name="expires_at">
            RFC3339 formatted timestamp of the expiration time of this Hype Train
          </param>
          <param name="cooldown_end_time">
            RFC3339 formatted timestamp of when another Hype Train can be started again
          </param>
          <param name="level" type="int">
            The highest level (in the scale of 1-5) reached of the Hype Train
          </param>
          <param name="goal" type="int">
            The goal value of the level above
          </param>
          <param name="total" type="int">
            The total score so far towards completing the level goal above
          </param>
          <param name="top_contributions" type="object" array="1">
            An array of top contribution objects, one object for each type. For example, one object would represent top contributor of BITS, by aggregate, and one would represent top contributor of SUBS by count.
            <param name="user">
              ID of the contributing user
            </param>
            <param name="type">
              Identifies the contribution method, either `BITS` or `SUBS`
            </param>
            <param name="total" type="int">
              Total aggregated amount of all contributions by the top contributor. If type is `BITS`, total represents aggregate amount of bits used.  If type is `SUBS`, aggregate total where 500, 1000, or 2500 represent tier 1, 2, or 3 subscriptions respectively.  For example, if top contributor has gifted a tier 1, 2, and 3 subscription, total would be 4000.
            </param>
          </param>
          <param name="latest_contribution" type="object">
            An object that represents the most recent contribution
            <param name="user">
              ID of the contributing user
            </param>
            <param name="type">
              Identifies the contribution method, either `BITS` or `SUBS`
            </param>
            <param name="total" type="int">
              Total aggregated amount of all contributions by the top contributor. If type is `BITS`, total represents aggregate amount of bits used.  If type is `SUBS`, aggregate total where 500, 1000, or 2500 represent tier 1, 2, or 3 subscriptions respectively.  For example, if top contributor has gifted a tier 1, 2, and 3 subscription, total would be 4000.
            </param>
          </param>
        </param>
      </response>
    </endpoint>
  </collection>

  <collection name="users">
    <endpoint name="GetUsers" path="users">
      <query>
        <param name="id" optional="1" />
        <param name="login" optional="1" />
      </query>
      <response>
        <param name="id" />
        <param name="login" />
        <param name="display_name" />
        <param name="type" />
        <param name="broadcaster_type" />
        <param name="description" />
        <param name="profile_image_url" />
        <param name="offline_image_url" />
        <param name="view_count" type="int" />
        <param name="email" optional="1" />
        <param name="created_at" />
      </response>
    </endpoint>
  </collection>

  <commonobject name="url_sizes">
    <param name="url_1x">
      Path to the 1x-sized image for this object.
    </param>
    <param name="url_2x">
      Path to the 2x-sized image for this object.
    </param>
    <param name="url_4x">
      Path to the 4x-sized image for this object.
    </param>
  </commonobject>
  <commonobject name="url_sizes_and_id">
    <param name="id">
      ID of the image version.
    </param>
    <param name="image_url_1x">
      Path to the 1x-sized image for this object.
    </param>
    <param name="image_url_2x">
      Path to the 2x-sized image for this object.
    </param>
    <param name="image_url_4x">
      Path to the 4x-sized image for this object.
    </param>
  </commonobject>
  <commonobject name="custom_reward">
    <param name="broadcaster_id">
      ID of the channel the reward is for.
    </param>
    <param name="broadcaster_login">
      Broadcaster's user login name.
    </param>
    <param name="broadcaster_name">
      Display name of the channel the reward is for.
    </param>
    <param name="id">
      ID of the reward.
    </param>
    <param name="image" type="object" optional="1" commonref="url_sizes">
      Set of custom images of 1x, 2x and 4x sizes for the reward { url_1x: string, url_2x: string, url_4x: string }, can be null if no images have been uploaded
    </param>
    <param name="background_color">
      Custom background color for the reward. Format: Hex with # prefix. Example: `#00E5CB`.
    </param>
    <param name="is_enabled" type="bool">
      Is the reward currently enabled, if false the reward won't show up to viewers
    </param>
    <param name="cost" type="int">
      The cost of the reward.
    </param>
    <param name="title">
      The title of the reward.
    </param>
    <param name="prompt">
      The prompt for the viewer when they are redeeming the reward.
    </param>
    <param name="max_per_stream_setting" type="object">
      Whether a maximum per stream is enabled and what the maximum is.
      <param name="is_enabled">
        Whether this setting is enabled.
      </param>
      <param name="max_per_stream" type="int">
        The maximum number per stream if enabled.
      </param>
    </param>
    <param name="max_per_user_per_stream_setting" type="object">
      Whether a maximum per user per stream is enabled and what the maximum is.
      <param name="is_enabled">
        Whether this setting is enabled.
      </param>
      <param name="max_per_user_per_stream" type="int">
        The maximum number per user per stream if enabled.
      </param>
    </param>
    <param name="global_cooldown_setting" type="object">
      Whether a cooldown is enabled and what the cooldown is.
      <param name="is_enabled">
        Whether this setting is enabled.
      </param>
      <param name="global_cooldown_seconds" type="int">
        The cooldown in seconds if enabled.
      </param>
    </param>
    <param name="is_paused" type="bool">
      Is the reward currently paused, if true viewers can't redeem
    </param>
    <param name="is_in_stock" type="bool">
      Is the reward currently in stock, if false viewers can't redeem
    </param>
    <param name="default_image" type="object" commonref="url_sizes">
      Set of default images of 1x, 2x and 4x sizes for the reward { url_1x: string, url_2x: string, url_4x: string }
    </param>
    <param name="should_redemptions_skip_request_queue" type="bool">
      Should redemptions be set to FULFILLED status immediately when redeemed and skip the request queue instead of the normal UNFULFILLED status.
    </param>
    <param name="redemptions_redeemed_current_stream" type="int" optional="1">
      The number of redemptions redeemed during the current live stream. Counts against the max_per_stream_setting limit. Null if the broadcasters stream isn't live or max_per_stream_setting isn't enabled.
    </param>
    <param name="cooldown_expires_at" optional="1">
      Timestamp of the cooldown expiration. Null if the reward isn't on cooldown.
    </param>
  </commonobject>
  <commonobject name="custom_redeem">
    <param name="broadcaster_id">
      The id of the broadcaster that the reward belongs to.
    </param>
    <param name="broadcaster_login">
      Broadcaster's user login name.
    </param>
    <param name="broadcaster_name">
      The display name of the broadcaster that the reward belongs to.
    </param>
    <param name="id">
      The ID of the redemption.
    </param>
    <param name="user_login">
      The login of the user who redeemed the reward.
    </param>
    <param name="user_id">
      The ID of the user that redeemed the reward.
    </param>
    <param name="user_name">
      The display name of the user that redeemed the reward.
    </param>
    <param name="user_input">
      The user input provided. Empty string if not provided.
    </param>
    <param name="status">
      One of UNFULFILLED, FULFILLED or CANCELED
    </param>
    <param name="redeemed_at">
      RFC3339 timestamp of when the reward was redeemed.
    </param>
    <param name="reward" type="object">
      Basic information about the Custom Reward that was redeemed at the time it was redeemed.
      <param name="id">
        The ID of the custom reward.
      </param>
      <param name="title">
        The title of the reward.
      </param>
      <param name="prompt">
        The prompt text associated with the reward.
      </param>
      <param name="cost" type="int">
        The cost of the reward, in channel points.
      </param>
    </param>
  </commonobject>
  <commonobject name="eventsub_transport">
    <param name="method">
      The transport method. Supported values: `webhook`.
    </param>
    <param name="callback">
      The callback URL where the notification should be sent.
    </param>
    <param name="secret">
      The secret used for verifying a signature.
    </param>
  </commonobject>
</TwitchAPI>