{
	"TwitchAPIEndpoint": {
		"prefix": "twitchapi",
		"scope": "haxe",
		"body": [
			"import haxe.http.HttpMethod;",
			"import twitch.api.APIEndpoint;",
			"",
			"typedef ${TM_FILENAME_BASE}Query = {$0",
			"}",
			"",
			"typedef ${TM_FILENAME_BASE}Request = {",
			"}",
			"",
			"typedef ${TM_FILENAME_BASE}Response = Array<{",
			"}>",
			"",
			"class ${TM_FILENAME_BASE} extends APIEndpoint {",
			"  public static var scopeRequired = \"$1\";",
			"  public static var oauthRequired = ${2:true};",
			"  public static var method = HttpMethod.$3;",
			"  public static var endpoint = \"$4\";",
			"",
			"  public static function call(client:Client, query:${TM_FILENAME_BASE}Query, request:${TM_FILENAME_BASE}Request):APIResponse<${TM_FILENAME_BASE}Response> {",
			"    return APIEndpoint.call(method, endpoint, client, query, request);",
			"  }",
			"}"
		],
		"description": "Create a new Twitch API endpoint"
	},
	"TwitchPubSubTopic": {
		"prefix": "twitchpubsub",
		"body": [
			"import haxe.Template;",
			"import twitch.Client;",
			"import twitch.pubsub.PubSubTopic;",
			"",
			"typedef ${TM_FILENAME_BASE}Message = {",
			"  $0",
			"}",
			"",
			"class ${TM_FILENAME_BASE} extends PubSubTopic {",
			"  public static var scope = \"$1\";",
			"  public static var topicTemplate = \"$2\";",
			"",
			"  public static function listen(client:Client, callback:${TM_FILENAME_BASE}Message->Void, channelId:String) {",
			"    PubSubTopic.listen(client, new Template(topicTemplate).execute({channelId: channelId}), callback);",
			"  }",
			"",
			"  public static function unlisten(client:Client, channelId:String) {",
			"    client.psUnlisten(new Template(topicTemplate).execute({channelId: channelId}));",
			"  }",
			"}"
		],
		"description": "Create a new Twitch PubSub topic"
	},
	"parseTags": {
		"prefix": "twitchchatparser",
		"body": [
			"static function parse$1(tags:Map<String, String>) {",
			"  var retval:$1Tags = {};",
			"",
			"  for (k => v in tags)",
			"    switch (k) {",
			"      case $0:",
			"    }",
			"",
			"  return retval;",
			"}"
		],
		"description": "Create a new function to parse Twitch tags"
	}
}